# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: code-coverage
on:
  pull_request:
    branches:
      - 'main'
      - 'Hk-mungai-patch-3'
      - 'Hk-mungai-patch-2'
      - 'Hk-mungai-patch-1'
  push:
    branches: 
      - 'main'
      - 'Hk-mungai-patch-3'
      - 'Hk-mungai-patch-2'
      - 'Hk-mungai-patch-1'


jobs:
   test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:   
          fetch-depth: 2
      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
          
      - name: Install yarn
        run: npm i -g yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: yarn --cwd admin install
        
      - name: Create aws exports
        run: |
          touch src/aws-exports.js
          cp .github/workflows/exports.js src/aws-exports.js    
      - name: Cypress run
        uses: cypress-io/github-action@v2.3.8
        with:
          config-file: cypress.config.js
          build: yarn build
          start: yarn start
          install: yarn --no-frozen-lockfile
          wait-on: 'http://127.0.0.1:3000'
      - name: Get Test Reports
        run: npx nyc report
      - name: Get Coverage summary
        run: npx nyc report --reporter=text-summary
      - name: Set code coverage commit status
        run: npx -p check-code-coverage set-gh-status
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set commit status using REST
        # https://developer.github.com/v3/repos/statuses/
        run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
                "state": "success",
                "description": "REST commit status",
                "context": "a test"
              }'
      - name: Set code coverage commit status 
        run: npx -p check-code-coverage set-gh-status
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
     
      
      
     
     
     
